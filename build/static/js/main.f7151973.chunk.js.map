{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","cardsArray","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","console","log","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCJSC,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,aAAyCG,IAAI,WACrD,6BACE,4BAAKL,GACL,2BAAIC,MCUGK,EAdE,SAAC,GAAgB,IAC1BC,EADyB,EAAbC,OACQC,IAAI,SAAAC,GAC5B,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAMR,GACXA,GAAIQ,EAAMR,GACVF,KAAMU,EAAMV,KACZC,MAAOS,EAAMT,UAInB,OAAO,6BAAMM,ICAAK,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKV,UAAU,OACb,2BACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEHI,EATA,SAAAC,GACb,OACE,yBACEC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAE/DJ,EAAMK,WC0CEC,G,kBA1Cb,aAAe,IAAD,6BACZC,QAAQC,IAAI,gBACZ,+CAgBFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAhB1C,EAAKC,MAAQ,CACXzB,OAAQ,GACRsB,YAAa,IALH,E,iFASO,IAAD,OAClBL,QAAQC,IAAI,qBACZQ,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,EAAKT,SAAS,CAAErB,OAAQ8B,Q,+BAS5Bb,QAAQC,IAAI,UADL,MAEyBa,KAAKN,MAA7BzB,EAFD,EAECA,OAAQsB,EAFT,EAESA,YACVU,EAAiBhC,EAAOiC,OAAO,SAAA/B,GACnC,OAAOA,EAAMV,KAAK0C,cAAcC,SAASb,EAAYY,iBAEvD,OAAQlC,EAAOoC,OAGb,yBAAKzC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAc0B,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQgC,MANtB,wBAAIrC,UAAU,MAAd,e,GA9BY0C,cCGlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SNwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC,gB","file":"static/js/main.f7151973.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?set=set1`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardsArray = robots.map(robot => {\r\n    return (\r\n      <Card\r\n        key={robot.id}\r\n        id={robot.id}\r\n        name={robot.name}\r\n        email={robot.email}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardsArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n\r\n/*\r\n    Using destructing\r\n */\r\n// <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />;\r\n// <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />;\r\n// <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />;\r\n\r\n/*\r\n    Using props\r\n*/\r\n// const CardList = props => {\r\n//     return (\r\n//       <div>\r\n//         <Card\r\n//           id={props.robots[0].id}\r\n//           name={props.robots[0].name}\r\n//           email={props.robots[0].email}\r\n//         />\r\n//         <Card\r\n//           id={props.robots[1].id}\r\n//           name={props.robots[1].name}\r\n//           email={props.robots[1].email}\r\n//         />\r\n//         <Card\r\n//           id={props.robots[2].id}\r\n//           name={props.robots[2].name}\r\n//           email={props.robots[2].email}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   };\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{ overflow: 'scroll', border: '5px solid black', height: '37vw' }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    console.log('constructor');\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('componentDidMount');\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    console.log('render');\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n    return !robots.length ? (\r\n      <h1 className=\"tc\">Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\nimport 'tachyons';\r\n\r\nimport App from './containers/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}